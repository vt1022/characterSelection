{"version":3,"sources":["Character.js","FeaturesSelection.js","NewestCharacters.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Character","this","props","head","hair","eyes","nose","mouth","body","className","Component","FeaturesSelection","featureNavClickFunction","changeFeatureFunction","selectedFeatureArray","map","feature","key","onClick","cssClass","globalClass","exec","join","NewestCharacters","addAnimationClass","setState","cardAnimation","liOnClick","e","character","handleCharacterListClick","charId","state","characterArray","slice","charStyles","charName","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleSubmit","preventDefault","userCharacterName","trim","currentCharacter","dbRef","database","ref","characterObjToFirebase","push","handleNameInput","target","value","handleFeatureNavClick","clickedFeature","showThese","i","featuresToShowCss","changeFeature","newFeatureCssClass","newCharObj","clickedCharacter","filter","on","result","data","val","arrayOfCharacters","characterObject","unshift","action","onSubmit","htmlFor","type","id","placeholder","onChange","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1b5c321.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Character extends Component {\r\n  render() {\r\n    const {head, hair, eyes, nose, mouth, body} = this.props;\r\n    return(\r\n      <div className=\"character\">\r\n        <div className={head}>\r\n          <div className={hair}>\r\n          </div>\r\n          <div className={eyes}>\r\n            <div className=\"left\"></div>\r\n            <div className=\"right\"></div>\r\n          </div>\r\n          <div className={nose}></div>\r\n          <div className={mouth}></div>\r\n          <div className={body}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Character","import React, {Component} from 'react'\r\n\r\nclass FeaturesSelection extends Component {\r\n  render() {\r\n    const {featureNavClickFunction, changeFeatureFunction, selectedFeatureArray} = this.props\r\n    const changeableFeatures = [\"hair\", \"head\", \"eyes\", \"nose\", \"mouth\", \"body\"];\r\n    return(\r\n      <div className=\"FeaturesSelection\">\r\n        <ul className=\"featuresNav\">\r\n          {\r\n            changeableFeatures.map( (feature) => {\r\n              return(\r\n                <li key={feature}>\r\n                  <button onClick={() => featureNavClickFunction(feature)}>{feature}</button>\r\n                </li> \r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n        {\r\n          selectedFeatureArray.map( (cssClass) => {\r\n            // regEx to grab class without numbers\r\n            const re = /[a-z]+/gi\r\n            const globalClass = re.exec(cssClass).join()\r\n            return(\r\n              <button key={cssClass} className=\"featureButton\" \r\n              onClick={() => changeFeatureFunction(cssClass)}>\r\n                <div className={`${cssClass} ${globalClass}`}>\r\n                  { // add left, right for eyes\r\n                    globalClass === \"eyes\"\r\n                      ? <>\r\n                          <div className=\"left\"></div>\r\n                          <div className=\"right\"></div>\r\n                        </>\r\n                      : <></>\r\n                  }\r\n                </div>\r\n              </button>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FeaturesSelection","import React, {Component} from 'react'\r\nimport Character from './Character'\r\n\r\nclass NewestCharacters extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {cardAnimation: false}\r\n  }\r\n\r\n  addAnimationClass = () => {\r\n    this.setState ({cardAnimation: true})\r\n  }\r\n\r\n  liOnClick = (e, character) => {\r\n    this.props.handleCharacterListClick(character.charId)\r\n    this.addAnimationClass()\r\n  }\r\n\r\n  render() {\r\n    const {characterArray, handleCharacterListClick} = this.props\r\n\r\n    return (\r\n      <ul>\r\n        { // control # of chars to show with slice\r\n          characterArray.slice(0, 5).map((character) => {\r\n            const {body, hair, eyes, head, mouth, nose} = character.charStyles\r\n            const {cardAnimation} = this.state\r\n            return(\r\n              <li key={character.charId}\r\n                onClick={(e) => this.liOnClick(e, character)}\r\n                // className={cardAnimation ? \"rotate-diagonal-1\" : \"\"}\r\n              >\r\n                <Character \r\n                  head={head}\r\n                  hair={hair}\r\n                  eyes={eyes}\r\n                  nose={nose}\r\n                  mouth={mouth}\r\n                  body={body}\r\n                />\r\n                <h3>{character.charName}</h3>\r\n              </li>\r\n            )\r\n          })\r\n        }\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NewestCharacters","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDGwUT2uLWQ0i927ITKJPUVWPk3ivEcB2g\",\r\n  authDomain: \"character-select-5ae64.firebaseapp.com\",\r\n  databaseURL: \"https://character-select-5ae64.firebaseio.com\",\r\n  projectId: \"character-select-5ae64\",\r\n  storageBucket: \"character-select-5ae64.appspot.com\",\r\n  messagingSenderId: \"836605574248\",\r\n  appId: \"1:836605574248:web:da5a282ba8dbaa22c6cfdd\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react'\nimport Character from './Character.js'\nimport FeaturesSelection from './FeaturesSelection.js'\nimport NewestCharacters from './NewestCharacters.js'\nimport firebase from './firebase.js'\nimport './style/style.css'\n\nimport FadeIn from 'react-fade-in'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      characterArray: [],\n      userCharacterName: \"\",\n      currentCharacter: {\n        \"charName\": \"\",\n        \"charStyles\": {\n          \"head\": \"\",\n          \"hair\": \"\",\n          \"eyes\": \"\",\n          \"nose\": \"\",\n          \"mouth\": \"\",\n          \"body\": \"\"\n        }\n      },\n      featuresToShowCss: [\"eyes1\", \"eyes2\", \"eyes3\", \"eyes4\", \"eyes5\"]\n    }\n  }\n  \n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (result) => {\n      const data = result.val()\n      const arrayOfCharacters = []\n      // set default character with classes\n      for (let key in data) {\n        const {body, eyes, hair, head, mouth, nose} = data[key].charStyles\n        const characterObject = {\n          \"charId\": key,\n          \"charName\": data[key].charName,\n          \"charStyles\": {\n            \"head\": head,\n            \"hair\": hair,\n            \"eyes\": eyes,\n            \"nose\": nose,\n            \"mouth\": mouth,\n            \"body\": body\n          }\n          \n        }\n        arrayOfCharacters.unshift(characterObject)\n        this.setState({\n          characterArray: arrayOfCharacters,\n          currentCharacter: characterObject\n        })\n      }\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.userCharacterName.trim() !== \"\") {\n      const {head, hair, eyes, nose, mouth, body} = this.state.currentCharacter.charStyles\n      const dbRef = firebase.database().ref()\n      const characterObjToFirebase = {\n        \"charName\": this.state.userCharacterName,\n        \"charStyles\": {\n          \"head\": head,\n          \"hair\": hair,\n          \"eyes\": eyes,\n          \"nose\": nose,\n          \"mouth\": mouth,\n          \"body\": body\n        }\n      }\n      dbRef.push(characterObjToFirebase)\n      this.setState({userCharacterName: \"\"})\n    } else {\n      this.setState({userCharacterName: \"\"})\n    }\n  }\n  // take user input and save into state\n  handleNameInput = (e) => {\n    this.setState({userCharacterName: e.target.value})\n  }\n  // updates the buttons to display selected feature category\n  handleFeatureNavClick = (clickedFeature) => {\n    const showThese = []\n    for (let i = 1; i < 6; i++) {\n      showThese.push(clickedFeature+i)\n    }\n    this.setState({featuresToShowCss: showThese})\n  }\n  // a reusable function to change different features:\n  changeFeature = (newFeatureCssClass) => {\n    const {body, hair, eyes, head, mouth, nose} = this.state.currentCharacter.charStyles\n    const newCharObj = {\n      \"charName\": this.state.currentCharacter.charName,\n      \"charStyles\": {\n        \"head\": head,\n        \"hair\": hair,\n        \"eyes\": eyes,\n        \"nose\": nose,\n        \"mouth\": mouth,\n        \"body\": body\n      }\n    }\n    // regEx to grab class without numbers\n    const re = /[a-z]+/gi \n    const clickedFeature = re.exec(newFeatureCssClass).join()\n    newCharObj['charStyles'][clickedFeature] = newFeatureCssClass\n    this.setState({currentCharacter: newCharObj})\n  }\n  // get info from FeaturesSelection.js and update state.currentChar\n  handleCharacterListClick = (charId) => {\n    const clickedCharacter = this.state.characterArray\n      .filter((character) => character.charId === charId)\n    this.setState({currentCharacter: clickedCharacter[0]})\n  }\n\n  render() {\n    const {body, hair, eyes, head, mouth, nose} = this.state.currentCharacter.charStyles\n    const {featuresToShowCss, characterArray} = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <header>\n            <h1>DivCraft</h1>\n          </header>\n\n          <section className=\"charCreation\">\n            <Character \n              head={head}\n              hair={hair}\n              eyes={eyes}\n              nose={nose}\n              mouth={mouth}\n              body={body}\n            />\n            <div className=\"grass\"></div>\n\n            <FadeIn>\n              <form action=\"\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"characterName\">Name:</label>\n                <input \n                  type=\"text\" \n                  id=\"characterName\"\n                  placeholder=\"display name\"\n                  value ={this.state.userCharacterName}\n                  onChange={this.handleNameInput} \n                />\n                <button className=\"button\">Create</button>\n              </form>\n            </FadeIn>\n\n            <FadeIn>\n              <FeaturesSelection \n                selectedFeatureArray={featuresToShowCss} \n                changeFeatureFunction={this.changeFeature}\n                featureNavClickFunction={this.handleFeatureNavClick}\n              />\n            </FadeIn>\n          </section>\n\n          <section className=\"newestCharacters\">\n              <NewestCharacters \n                characterArray={characterArray}\n                handleCharacterListClick={this.handleCharacterListClick}  \n              />\n          </section>\n        </div> {/* wrapper */}\n\n        <footer>\n          <p><a href=\"https://twitter.com/vinccimantsui\">@vinccimantsui</a> © 2020</p> \n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}