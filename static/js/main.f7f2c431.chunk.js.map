{"version":3,"sources":["Character.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Character","this","props","head","hair","hairLeft","hairRight","eyes","eyeLeft","eyeRight","nose","mouth","body","className","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleSubmit","e","preventDefault","state","userCharacterName","trim","database","ref","push","setState","handleNameInput","target","value","console","log","characters","on","result","val","action","onSubmit","htmlFor","type","id","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTA4BeA,G,6KAxBH,IAAD,EAC+EC,KAAKC,MAApFC,EADA,EACAA,KAAMC,EADN,EACMA,KAAMC,EADZ,EACYA,SAAUC,EADtB,EACsBA,UAAWC,EADjC,EACiCA,KAAMC,EADvC,EACuCA,QAASC,EADhD,EACgDA,SAAUC,EAD1D,EAC0DA,KAAMC,EADhE,EACgEA,MAAOC,EADvE,EACuEA,KAC9E,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,aACb,yBAAKA,UAAWV,GACd,yBAAKU,UAAWT,GACd,yBAAKS,UAAWR,IAChB,yBAAKQ,UAAWP,KAElB,yBAAKO,UAAWN,GACd,yBAAKM,UAAWL,IAChB,yBAAKK,UAAWJ,KAElB,yBAAKI,UAAWH,IAChB,yBAAKG,UAAWF,KAElB,yBAAKE,UAAWD,U,GAlBFE,c,sBCUxBC,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,EC6EeS,G,wDAtFb,aAAe,IAAD,8BACZ,gBAoCFC,aAAe,SAACC,IACdA,EAAEC,iBAC0C,KAAxC,EAAKC,MAAMC,kBAAkBC,SACjBf,EAASgB,WAAWC,MAC5BC,KAAK,EAAKL,MAAMC,mBACtB,EAAKK,SAAS,CACZL,kBAAmB,MAGrB,EAAKK,SAAS,CACZL,kBAAmB,MA/CX,EAoDdM,gBAAkB,SAACT,GACjB,EAAKQ,SAAS,CACZL,kBAAmBH,EAAEU,OAAOC,QAG9BC,QAAQC,IAAI,EAAKX,MAAMC,oBAvDvB,EAAKD,MAAQ,CACXY,WAAY,GACZX,kBAAmB,IAJT,E,gEAuBEd,EAASgB,WAAWC,MAC5BS,GAAG,SAAS,SAACC,GACJA,EAAOC,W,+BAmCd,IAAD,EACiC1C,KAAK2B,MAA1BC,GADZ,EACAW,WADA,EACYX,mBACnB,OACE,yBAAKhB,UAAU,OACb,0BAAM+B,OAAO,GAAGC,SAAU5C,KAAKwB,cAC7B,2BAAOqB,QAAQ,iBAAf,SACA,2BAAOC,KAAK,OAAOC,GAAG,gBAAgBC,SAAUhD,KAAKkC,gBAAiBE,MAAQR,IAC9E,2CAEF,kBAAC,EAAD,CACE1B,KAAK,OACLC,KAAK,OACLC,SAAS,OACTC,UAAU,QACVC,KAAK,OACLC,QAAQ,OACRC,SAAS,QACTC,KAAK,OACLC,MAAM,QACNC,KAAK,c,GAhFGE,cCOEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.f7f2c431.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Character.css'\r\n\r\nclass Character extends Component {\r\n  render() {\r\n    const {head, hair, hairLeft, hairRight, eyes, eyeLeft, eyeRight, nose, mouth, body} = this.props;\r\n    return(\r\n      <div className=\"canvas\">\r\n        <div className=\"character\">\r\n          <div className={head}>\r\n            <div className={hair}>\r\n              <div className={hairLeft}></div>\r\n              <div className={hairRight}></div>\r\n            </div>\r\n            <div className={eyes}>\r\n              <div className={eyeLeft}></div>\r\n              <div className={eyeRight}></div>\r\n            </div>\r\n            <div className={nose}></div>\r\n            <div className={mouth}></div>\r\n          </div>\r\n          <div className={body}></div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Character","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDGwUT2uLWQ0i927ITKJPUVWPk3ivEcB2g\",\r\n  authDomain: \"character-select-5ae64.firebaseapp.com\",\r\n  databaseURL: \"https://character-select-5ae64.firebaseio.com\",\r\n  projectId: \"character-select-5ae64\",\r\n  storageBucket: \"character-select-5ae64.appspot.com\",\r\n  messagingSenderId: \"836605574248\",\r\n  appId: \"1:836605574248:web:da5a282ba8dbaa22c6cfdd\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react'\nimport Character from './Character.js'\nimport firebase from './firebase.js'\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      characters: [],\n      userCharacterName: \"\",\n    }\n    // const charactersObject = {\n    //   \"charId\": key,\n    //   \"charName\": userCharacterName,\n    //   \"head\": headClass,\n    //   \"hair\": hairClass,\n    //     \"hairLeft\": hairLeftClass,\n    //     \"hairRight\": hairRightClass,\n    //   \"eyes\": eyeClass,\n    //     \"eyeLeft\": eyeLeftClass,\n    //     \"eyeRight\": eyeRightClass,\n    //   \"nose\": noseClass,\n    //   \"mouth\": mouthClass,\n    //   \"body\": bodyClass\n    // }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (result) => {\n      const data = result.val()\n      const arrayOfClasses = []\n      // set default character with classes\n      // for (let key in data) {\n      //   arrayOfClasses.push({\"bookId\": key, \"bookName\": data[key]})\n      //   this.setState({\n      //     books: arrayOfClasses\n      //   })\n      // }\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.userCharacterName.trim() !== \"\") {\n      const dbRef = firebase.database().ref()\n      dbRef.push(this.state.userCharacterName);\n      this.setState({\n        userCharacterName: \"\"\n      })\n    } else {\n      this.setState({\n        userCharacterName: \"\"\n      })\n    }\n  }\n  // take user input and save into state\n  handleNameInput = (e) => {\n    this.setState({\n      userCharacterName: e.target.value,\n    })\n    \n    console.log(this.state.userCharacterName);\n  }\n\n  render() {\n    const {characters, userCharacterName} = this.state\n    return (\n      <div className=\"App\">\n        <form action=\"\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"characterName\">Name:</label>\n          <input type=\"text\" id=\"characterName\" onChange={this.handleNameInput} value ={userCharacterName}/>\n          <button>Create</button>\n        </form>\n        <Character \n          head=\"head\"\n          hair=\"hair\"\n          hairLeft=\"left\"\n          hairRight=\"right\"\n          eyes=\"eyes\"\n          eyeLeft=\"left\"\n          eyeRight=\"right\"\n          nose=\"nose\"\n          mouth=\"mouth\"\n          body=\"body\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}