{"version":3,"sources":["Character.js","FeaturesSelection.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Character","this","props","head","hair","eyes","nose","mouth","body","className","Component","FeaturesSelection","featureNavClickFunction","changeFeatureFunction","selectedFeatureArray","map","feature","key","onClick","cssClass","globalClass","exec","join","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleSubmit","e","preventDefault","state","character","userCharacterName","trim","database","ref","push","setState","handleNameInput","target","value","console","log","handleFeatureNavClick","clickedFeature","showThese","i","featuresToShowCss","changeFeature","newFeatureCssClass","currentCharacter","charStyles","newCharObj","charId","charName","characterArray","on","result","data","val","arrayOfCharacters","characterObject","action","onSubmit","htmlFor","type","id","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42d53b31.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Character extends Component {\r\n  render() {\r\n    const {head, hair, eyes, nose, mouth, body} = this.props;\r\n    return(\r\n      <div className=\"canvas\">\r\n        <div className=\"character\">\r\n          <div className={head}>\r\n            <div className={hair}>\r\n              <div className=\"left\"></div>\r\n              <div className=\"right\"></div>\r\n            </div>\r\n            <div className={eyes}>\r\n              <div className=\"left\"></div>\r\n              <div className=\"right\"></div>\r\n            </div>\r\n            <div className={nose}></div>\r\n            <div className={mouth}></div>\r\n          </div>\r\n          <div className={body}></div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Character","import React, {Component} from 'react'\r\n\r\nclass FeaturesSelection extends Component {\r\n  render() {\r\n    const {featureNavClickFunction, changeFeatureFunction, selectedFeatureArray} = this.props\r\n    const changeableFeatures = [\"hair\", \"head\", \"eyes\", \"nose\", \"mouth\", \"body\"];\r\n    return(\r\n      <div className=\"FeaturesSelection\">\r\n        <ul className=\"featuresNav\">\r\n          {\r\n            changeableFeatures.map( (feature) => {\r\n              return(\r\n                <li key={feature}>\r\n                  <button onClick={() => featureNavClickFunction(feature)}>{feature}</button>\r\n                </li> \r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n        {\r\n          selectedFeatureArray.map( (cssClass) => {\r\n            const re = /[a-z]+/gi\r\n            const globalClass = re.exec(cssClass).join()\r\n            return(\r\n              <button key={cssClass} className=\"featureButton\" \r\n              onClick={() => changeFeatureFunction(cssClass)}>\r\n                <div className={`${cssClass} ${globalClass}`}>\r\n                  <div className=\"left\"></div>\r\n                  <div className=\"right\"></div>\r\n                </div>\r\n              </button>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default FeaturesSelection","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDGwUT2uLWQ0i927ITKJPUVWPk3ivEcB2g\",\r\n  authDomain: \"character-select-5ae64.firebaseapp.com\",\r\n  databaseURL: \"https://character-select-5ae64.firebaseio.com\",\r\n  projectId: \"character-select-5ae64\",\r\n  storageBucket: \"character-select-5ae64.appspot.com\",\r\n  messagingSenderId: \"836605574248\",\r\n  appId: \"1:836605574248:web:da5a282ba8dbaa22c6cfdd\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, { Component } from 'react'\nimport Character from './Character.js'\nimport FeaturesSelection from './FeaturesSelection.js'\nimport firebase from './firebase.js'\nimport './style/style.css'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      characterArray: [],\n      userCharacterName: \"\",\n      currentCharacter: {\n        \"charId\": \"01\",\n        \"charName\": \"default\",\n        \"charStyles\": {\n          \"head\": \"head1\",\n          \"hair\": \"hair1\",\n          \"eyes\": \"eyes1\",\n          \"nose\": \"nose1\",\n          \"mouth\": \"mouth1\",\n          \"body\": \"body1\"\n        }\n      },\n      featuresToShowCss: [\"eyes1\", \"eyes2\", \"eyes3\", \"eyes4\", \"eyes5\"]\n    }\n  }\n  \n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (result) => {\n      const data = result.val()\n      const arrayOfCharacters = []\n      // set default character with classes\n      for (let key in data) {\n        const {body, eyes, hair, head, mouth, nose} = data[key].charStyles\n        const characterObject = {\n          \"charId\": key,\n          \"charName\": key.charName,\n          \"charStyles\": {\n            \"head\": head,\n            \"hair\": hair,\n            \"eyes\": eyes,\n            \"nose\": nose,\n            \"mouth\": mouth,\n            \"body\": body\n          }\n        }\n        arrayOfCharacters.push(characterObject)\n        this.setState({\n          characterArray: arrayOfCharacters,\n          currentCharacter: characterObject\n        })\n        console.log(data)\n      }\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const {character} = this.state;\n    if (this.state.userCharacterName.trim() !== \"\") {\n      const dbRef = firebase.database().ref()\n      // push this to fb:\n      // const characterObject = {\n      //   \"charName\": this.state.userCharacterName,\n      //   \"charStyles\": {\n      //     \"head\": head,\n      //     \"hair\": hair,\n      //     \"eyes\": eyes,\n      //     \"nose\": nose,\n      //     \"mouth\": mouth,\n      //     \"body\": body\n      //   }\n      // }\n      // change this to push object:\n      dbRef.push(this.state.userCharacterName)\n      this.setState({\n        userCharacterName: \"\"\n      })\n    } else {\n      this.setState({\n        userCharacterName: \"\"\n      })\n    }\n  }\n  // take user input and save into state\n  handleNameInput = (e) => {\n    this.setState({\n      userCharacterName: e.target.value,\n    })\n    \n    console.log(this.state.userCharacterName);\n  }\n\n  handleFeatureNavClick = (clickedFeature) => {\n    const showThese = []\n    for (let i = 1; i < 6; i++) {\n      showThese.push(clickedFeature+i)\n    }\n    this.setState({\n      featuresToShowCss: showThese\n    })\n  }\n\n  // a reusable function to change different features\n  changeFeature = (newFeatureCssClass) => {\n    const {body, hair, eyes, head, mouth, nose} = this.state.currentCharacter.charStyles\n    // change the selected feature\n    const newCharObj = {\n      \"charId\": this.state.currentCharacter.charId,\n      \"charName\": this.state.currentCharacter.charName,\n      \"charStyles\": {\n        \"head\": head,\n        \"hair\": hair,\n        \"eyes\": eyes,\n        \"nose\": nose,\n        \"mouth\": mouth,\n        \"body\": body\n      }\n    }\n    const re = /[a-z]+/gi\n    const clickedFeature = re.exec(newFeatureCssClass).join()\n    newCharObj['charStyles'][clickedFeature] = newFeatureCssClass\n    this.setState({\n      currentCharacter: newCharObj\n    })\n  }\n\n  render() {\n    const {body, hair, eyes, head, mouth, nose} = this.state.currentCharacter.charStyles\n    const {featuresToShowCss} = this.state\n    return (\n      <div className=\"App\">\n        <form action=\"\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"characterName\">Name:</label>\n          <input type=\"text\" id=\"characterName\" onChange={this.handleNameInput} value ={this.state.userCharacterName}/>\n          <button>Create</button>\n        </form>\n\n        <Character \n          head={head}\n          hair={hair}\n          eyes={eyes}\n          nose={nose}\n          mouth={mouth}\n          body={body}\n        />\n        \n        <FeaturesSelection \n          selectedFeatureArray={featuresToShowCss} \n          changeFeatureFunction={this.changeFeature}\n          featureNavClickFunction={this.handleFeatureNavClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}